#include<mpi.h>
#include<stdio.h>
#define NUM_DIMS 1
int main(int argc, char** argv)
{
	int rank, size, i, A, B, dims[NUM_DIMS];
	int periods[NUM_DIMS], new_coords[NUM_DIMS];
	int sourceb, destb, sourcem, destm;
	int reorder = 0;
	MPI_Comm comm_cart;
	MPI_Status status;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	/* Обнуляем массив dims и заполняем массив periods для топологии "линейка" */
	for (i = 0; i < NUM_DIMS; i++) { dims[i] = 0; periods[i] = 0; }
	/* Заполняем массив dims, где указываем размеры (одномерной) решентки */
	MPI_Dims_create(size, NUM_DIMS, dims);
	/* Создаем топологию "линейка с communicator-ом comm_cart */
	MPI_Cart_create(MPI_COMM_WORLD, NUM_DIMS, dims, periods, reorder,
		&comm_cart);
	/* Отображаем ранги в координаты и выводим их */
	MPI_Cart_coords(comm_cart, rank, NUM_DIMS, new_coords);
	A = new_coords[0];
	B = -1;
	/*
	* Каждая ветвь находит своих соседей вдоль линейки, в направлении больших
	* значений номеров компьютеров
	* и в направлении меньших значений номеров. Ветви с номером new_cords[0]==0
	* не имеют соседй
	* с меньшим номером, поэтому с этого направления эти ветви принимают данные от
	* несуществующих ветвей, т.е. от ветвей sourcem=MPI_PROC_NULL, и, соответсвенно,
	* передают данные в этом направлении
	* ветвям destm=MPI_PROC_NULL. Аналогично определяется соседство для ветвей с
	* номером new_coords[0]==dims[0]-1
	*/
	if (new_coords[0] == 0)
	{
		sourcem = destm = MPI_PROC_NULL;
	}
	else
	{
		sourcem = destm = new_coords[0] - 1;
	}
	if (new_coords[0] == dims[0] - 1)
	{
		destb = sourceb = MPI_PROC_NULL;
	}
	else
	{
		destb = sourceb = new_coords[0] + 1;
	}
	/*
	* Каждая ветвь передает свои данные (значение переменной А) своей
	* соседней ветви с большим номером и принимает данные в В от соседней ветви с меньшим номером
	* Свой номер и номер, принятый в В выводятся на печать
	*/
	MPI_Sendrecv(&A, 1, MPI_INT, destb, 12, &B, 1, MPI_INT, sourcem, 12, comm_cart,
		&status);
	printf("process[%d] prinimaet iz %d\n", new_coords[0], B);
	/* Сдвиг данных в противоположную сторону и вывод соотвествующих данных */
	MPI_Sendrecv(&A, 1, MPI_INT, destm, 12, &B, 1, MPI_INT, sourceb, 12, comm_cart,
		&status);
	printf("process[%d] prinimaet iz %d\n", new_coords[0], B);
	/* Все ветви завершают системные процессы, связанные с топологие comm_cart и
	завершают программы*/
	MPI_Comm_free(&comm_cart);
	MPI_Finalize();
	return 0;
}
